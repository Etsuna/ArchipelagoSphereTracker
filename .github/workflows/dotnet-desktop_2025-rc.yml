name: .NET Core Self-Contained Build 2025 RC

on:
  push:
    branches: [ "rc" ]
    tags: [ "v*.*.*-beta*" ]
  pull_request:
    branches: [ "rc" ]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-2025
            rid: win-x64
            configuration: RC
          - os: ubuntu-latest
            rid: linux-x64
            configuration: RC

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Compute VERSION from tag
      shell: bash
      run: |
        if [ "${{ github.ref_type }}" = "tag" ]; then
          raw="${GITHUB_REF_NAME#v}"; VERSION="${raw%%-*}"
        else
          VERSION="0.0.0"
        fi
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"
        echo "Version: $VERSION"

    - name: Define project list
      shell: bash
      run: |
        {
          echo 'PROJECTS<<EOF'
          echo "ast:ArchipelagoSphereTracker.csproj"
          if [ "${{ matrix.os }}" = "windows-2025" ]; then
            echo "gui:Gui/AST-GUI.csproj"
          fi
          echo 'EOF'
        } >> "$GITHUB_ENV"

    - name: Publish all projects (self-contained, single-file)
      shell: bash
      run: |
        set -euo pipefail
        while IFS= read -r line; do
          key="${line%%:*}"; proj="${line#*:}"
          echo "Publish $proj -> artifacts/$key"
          dotnet publish "$proj" \
            -c "${{ matrix.configuration }}" \
            -r "${{ matrix.rid }}" \
            -o "artifacts/$key" \
            -p:SelfContained=true \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=false \
            -p:IncludeAllContentForSelfExtract=true \
            -p:Version="${{ env.VERSION }}"
        done <<< "$PROJECTS"

    - name: Code sign + verify (Windows)
      if: matrix.os == 'windows-2025'
      shell: pwsh
      env:
        CODESIGN_PWD: ${{ secrets.CERTIFICATE_PASSWORD }}
        CODESIGN_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
      run: |
        # Rebuild PFX from base64
        New-Item -ItemType Directory -Path certificate | Out-Null
        Set-Content -Path certificate\certificate.txt -Value $env:CODESIGN_BASE64
        certutil -decode certificate\certificate.txt certificate\certificate.pfx > $null

        # Pick latest signtool
        $signtool = Get-ChildItem "${env:ProgramFiles(x86)}\Windows Kits\10\bin\*\x64\signtool.exe" -ErrorAction SilentlyContinue |
                    Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
        if (-not $signtool) { throw "signtool.exe not found." }
        Write-Host "Using signtool: $signtool"

        # Sign all EXEs in artifacts
        $targets = Get-ChildItem -Path artifacts -Filter *.exe -Recurse -ErrorAction SilentlyContinue
        if (-not $targets) { throw "No EXE found to sign in artifacts" }
        foreach ($exe in $targets) {
          & $signtool sign /fd SHA256 /td SHA256 /tr "http://timestamp.sectigo.com/rfc3161" `
            /f certificate\certificate.pfx /p $env:CODESIGN_PWD $exe.FullName
        }

        # Verify signatures
        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2("certificate\certificate.pfx", $env:CODESIGN_PWD)
        $cerPath = "certificate\codesign.cer"
        [IO.File]::WriteAllBytes($cerPath, $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert))
        certutil -addstore -f Root $cerPath
        certutil -addstore -f "TrustedPublisher" $cerPath

        Get-ChildItem -Path artifacts -Filter *.exe -Recurse | ForEach-Object {
          Write-Host "Verifying $($_.FullName)"
          Get-AuthenticodeSignature $_.FullName | Format-List Status,StatusMessage,SignerCertificate,TimeStamperCertificate
        }

        certutil -delstore Root $($cert.Thumbprint)
        certutil -delstore "TrustedPublisher" $($cert.Thumbprint)
        Remove-Item -Recurse -Force certificate

    - name: Prepare upload_dir
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p upload_dir
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "Tag: copy without .pdb"
          find artifacts -type f ! -iname '*.pdb' -exec cp {} upload_dir/ \;
        else
          echo "Branch: copy all files"
          find artifacts -type f -exec cp {} upload_dir/ \;
        fi

    - name: Copy command files (if present)
      shell: bash
      run: |
        set -euo pipefail
        src="Install/${{ matrix.rid }}"
        if [ -d "$src" ] && compgen -G "$src/*" > /dev/null; then
          cp -r "$src/"* upload_dir/
          echo "Copied from $src"
        else
          echo "No command files for $src"
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ast-${{ matrix.rid }}${{ github.ref_type == 'tag' && format('-{0}', github.ref_name) || '' }}
        path: upload_dir/

    - name: Create release_assets folder
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: mkdir -p release_assets

    - name: Create ZIP archive (Windows)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-2025'
      shell: pwsh
      run: |
        $filename = "ast-${{ matrix.rid }}-${{ github.ref_name }}"
        Compress-Archive -Path upload_dir\* -DestinationPath release_assets\$filename.zip

    - name: Create TAR.GZ archive (Linux)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os != 'windows-2025'
      shell: bash
      run: |
        filename="ast-${{ matrix.rid }}-${{ github.ref_name }}"
        tar -czvf "release_assets/${filename}.tar.gz" -C upload_dir .

    - name: Create GitHub Draft Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        draft: true
        files: release_assets/*
