name: .NET Core Self-Contained Build

on:
  push:
    branches: [ "main", "dev" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            configuration: Release
          - os: ubuntu-latest
            rid: linux-x64
            configuration: Release
          - os: ubuntu-latest
            rid: linux-arm64
            configuration: Release

    runs-on: ${{ matrix.os }}

    env:
      Solution_Name: ArchipelagoSphereTracker.csproj

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore ${{ env.Solution_Name }}

    - name: Build project
      run: dotnet build ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }} --no-restore

    - name: Publish self-contained executable
      run: >
        dotnet publish ${{ env.Solution_Name }}
        -c ${{ matrix.configuration }}
        -r ${{ matrix.rid }}
        /p:SelfContained=true
        /p:PublishSingleFile=true
        /p:PublishTrimmed=false
        /p:IncludeAllContentForSelfExtract=true

    - name: Sign executable
      if: matrix.os == 'windows-latest'
      env:
        CODESIGN_PWD: ${{ secrets.CERTIFICATE_PASSWORD }}
        CODESIGN_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
      run: |
        New-Item -ItemType directory -Path certificate
        Set-Content -Path certificate\certificate.txt -Value $env:CODESIGN_BASE64
        certutil -decode certificate\certificate.txt certificate\certificate.pfx

        & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x86/signtool.exe' sign /fd SHA256 /p $env:CODESIGN_PWD /f certificate\certificate.pfx /tr "http://timestamp.sectigo.com/rfc3161" /td sha256 bin\Release\net8.0\${{ matrix.rid }}\publish\ArchipelagoSphereTracker.exe

        Remove-Item -Recurse -Force certificate

    - name: Prepare upload folder
      shell: bash
      run: |
        mkdir -p upload_dir
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "Tag detected: copying files without .pdb"
          find bin/Release/net8.0/${{ matrix.rid }}/publish/ -maxdepth 1 -type f ! -iname '*.pdb' -exec cp {} upload_dir/ \;
        else
          echo "Branch build: copying all files"
          cp bin/Release/net8.0/${{ matrix.rid }}/publish/* upload_dir/
        fi

    - name: Copy command files
      shell: bash
      run: |
        cp Install/${{ matrix.rid }}/* upload_dir/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ast-${{ matrix.rid }}${{ github.ref_type == 'tag' && format('-{0}', github.ref_name) || '' }}
        path: upload_dir/

    - name: Create archive folder
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        mkdir -p release_assets

    - name: Create ZIP archive (Windows)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $filename = "ast-${{ matrix.rid }}-${{ github.ref_name }}"
        Compress-Archive -Path upload_dir\* -DestinationPath release_assets\$filename.zip

    - name: Create TAR.GZ archive (Linux)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os != 'windows-latest'
      shell: bash
      run: |
        filename="ast-${{ matrix.rid }}-${{ github.ref_name }}"
        tar -czvf "release_assets/${filename}.tar.gz" -C upload_dir .

    - name: Create GitHub Draft Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        draft: true
        files: release_assets/*