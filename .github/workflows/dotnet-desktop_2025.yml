name: .NET Core Self-Contained Build 2025

on:
  push:
    branches: [ "main", "dev" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-2025
            rid: win-x64
            configuration: Release
          - os: ubuntu-latest
            rid: linux-x64
            configuration: Release

    runs-on: ${{ matrix.os }}

    env:
      Solution_Name: ArchipelagoSphereTracker.csproj
      SolutionGui_Name: Gui/AST-GUI.csproj

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Déterminer VERSION depuis le tag
      id: ver
      shell: bash
      run: |
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "VERSION=${GITHUB_REF_NAME#v}" >> "$GITHUB_ENV"
        else
          echo "VERSION=0.0.0-ci.${{ github.run_number }}" >> "$GITHUB_ENV"
        fi
        echo "Version effective: $VERSION"

    - name: Restore dependencies AST
      run: dotnet restore ${{ env.Solution_Name }}

    - name: Restore dependencies AST-GUI Windows
      if: matrix.os == 'windows-2025'
      run: dotnet restore ${{ env.SolutionGui_Name }}

    - name: Build project AST
      run: dotnet build ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }} --no-restore /p:Version=${{ env.VERSION }}

    - name: Build project AST-GUI Windows
      if: matrix.os == 'windows-2025'
      run: dotnet build ${{ env.SolutionGui_Name }} --configuration ${{ matrix.configuration }} --no-restore /p:Version=${{ env.VERSION }}

    - name: Publish self-contained executable AST
      run: >
        dotnet publish ${{ env.Solution_Name }}
        -c ${{ matrix.configuration }}
        -r ${{ matrix.rid }}
        /p:SelfContained=true
        /p:PublishSingleFile=true
        /p:PublishTrimmed=false
        /p:IncludeAllContentForSelfExtract=true
        /p:Version=${{ env.VERSION }}

    - name: Publish self-contained executable AST-GUI Windows
      if: matrix.os == 'windows-2025'
      run: >
        dotnet publish ${{ env.SolutionGui_Name }}
        -c ${{ matrix.configuration }}
        -r ${{ matrix.rid }}
        /p:SelfContained=true
        /p:PublishSingleFile=true
        /p:PublishTrimmed=false
        /p:IncludeAllContentForSelfExtract=true
        /p:Version=${{ env.VERSION }}

    - name: Sign executable AST
      if: matrix.os == 'windows-2025'
      shell: pwsh
      env:
        CODESIGN_PWD: ${{ secrets.CERTIFICATE_PASSWORD }}
        CODESIGN_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
      run: |
        New-Item -ItemType Directory -Path certificate | Out-Null
        Set-Content -Path certificate\certificate.txt -Value $env:CODESIGN_BASE64
        certutil -decode certificate\certificate.txt certificate\certificate.pfx > $null

        $signtool = Get-ChildItem "${env:ProgramFiles(x86)}\Windows Kits\10\bin\*\x64\signtool.exe" -ErrorAction SilentlyContinue |
                    Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
        if (-not $signtool) { throw "signtool.exe not found on runner." }

        Write-Host "Using signtool: $signtool"
        $sdkVersion = Split-Path (Split-Path $signtool -Parent) -Leaf
        Write-Host "Detected Windows SDK: $sdkVersion"

        $artifactDir = "bin\${{ matrix.configuration }}\net8.0\${{ matrix.rid }}\publish"
        $targets = Get-ChildItem $artifactDir -Filter *.exe -ErrorAction SilentlyContinue
        if (-not $targets) { throw "No EXE found to sign in $artifactDir" }

        foreach ($exe in $targets) {
          & $signtool sign /fd SHA256 /td SHA256 /tr "http://timestamp.sectigo.com/rfc3161" `
            /f certificate\certificate.pfx /p $env:CODESIGN_PWD $exe.FullName
        }

        Remove-Item -Recurse -Force certificate

    - name: Verify signature AST Windows
      if: matrix.os == 'windows-2025'
      shell: pwsh
      env:
        CODESIGN_PWD: ${{ secrets.CERTIFICATE_PASSWORD }}
        CODESIGN_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
      run: |
        New-Item -ItemType Directory -Path certificate | Out-Null
        Set-Content -Path certificate\certificate.txt -Value $env:CODESIGN_BASE64
        certutil -decode certificate\certificate.txt certificate\certificate.pfx > $null

        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2("certificate\certificate.pfx", $env:CODESIGN_PWD)
        $cerPath = "certificate\codesign.cer"
        [IO.File]::WriteAllBytes($cerPath, $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert))

        certutil -addstore -f Root $cerPath
        certutil -addstore -f "TrustedPublisher" $cerPath

        $artifactDir = "bin\${{ matrix.configuration }}\net8.0\${{ matrix.rid }}\publish"
        Get-ChildItem $artifactDir -Filter *.exe | ForEach-Object {
          Write-Host "Verifying $($_.FullName)"
          Get-AuthenticodeSignature $_.FullName | Format-List Status,StatusMessage,SignerCertificate,TimeStamperCertificate
        }

        certutil -delstore Root $($cert.Thumbprint)
        certutil -delstore "TrustedPublisher" $($cert.Thumbprint)
        Remove-Item -Recurse -Force certificate

    - name: Sign executable AST-GUI Windows
      if: matrix.os == 'windows-2025'
      shell: pwsh
      env:
        CODESIGN_PWD: ${{ secrets.CERTIFICATE_PASSWORD }}
        CODESIGN_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
      run: |
        New-Item -ItemType Directory -Path certificate | Out-Null
        Set-Content -Path certificate\certificate.txt -Value $env:CODESIGN_BASE64
        certutil -decode certificate\certificate.txt certificate\certificate.pfx > $null

        $signtool = Get-ChildItem "${env:ProgramFiles(x86)}\Windows Kits\10\bin\*\x64\signtool.exe" -ErrorAction SilentlyContinue |
                    Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
        if (-not $signtool) { throw "signtool.exe not found on runner." }

        Write-Host "Using signtool: $signtool"
        $sdkVersion = Split-Path (Split-Path $signtool -Parent) -Leaf
        Write-Host "Detected Windows SDK: $sdkVersion"

        $artifactDir = "Gui\bin\${{ matrix.configuration }}\net8.0-windows\${{ matrix.rid }}\publish"
        $targets = Get-ChildItem $artifactDir -Filter *.exe -ErrorAction SilentlyContinue
        if (-not $targets) { throw "No EXE found to sign in $artifactDir" }

        foreach ($exe in $targets) {
          & $signtool sign /fd SHA256 /td SHA256 /tr "http://timestamp.sectigo.com/rfc3161" `
            /f certificate\certificate.pfx /p $env:CODESIGN_PWD $exe.FullName
        }

        Remove-Item -Recurse -Force certificate

    - name: Verify signature AST-Gui Windows
      if: matrix.os == 'windows-2025'
      shell: pwsh
      env:
        CODESIGN_PWD: ${{ secrets.CERTIFICATE_PASSWORD }}
        CODESIGN_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
      run: |
        New-Item -ItemType Directory -Path certificate | Out-Null
        Set-Content -Path certificate\certificate.txt -Value $env:CODESIGN_BASE64
        certutil -decode certificate\certificate.txt certificate\certificate.pfx > $null

        $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2("certificate\certificate.pfx", $env:CODESIGN_PWD)
        $cerPath = "certificate\codesign.cer"
        [IO.File]::WriteAllBytes($cerPath, $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert))

        certutil -addstore -f Root $cerPath
        certutil -addstore -f "TrustedPublisher" $cerPath

        $artifactDir = "Gui\bin\${{ matrix.configuration }}\net8.0-windows\${{ matrix.rid }}\publish"
        Get-ChildItem $artifactDir -Filter *.exe | ForEach-Object {
          Write-Host "Verifying $($_.FullName)"
          Get-AuthenticodeSignature $_.FullName | Format-List Status,StatusMessage,SignerCertificate,TimeStamperCertificate
        }

        certutil -delstore Root $($cert.Thumbprint)
        certutil -delstore "TrustedPublisher" $($cert.Thumbprint)
        Remove-Item -Recurse -Force certificate

    - name: Prepare upload folder AST
      shell: bash
      run: |
        mkdir -p upload_dir
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "Tag detected: copying files without .pdb"
          find bin/Release/net8.0/${{ matrix.rid }}/publish/ -maxdepth 1 -type f ! -iname '*.pdb' -exec cp {} upload_dir/ \;
        else
          echo "Branch build: copying all files"
          cp bin/Release/net8.0/${{ matrix.rid }}/publish/* upload_dir/
        fi

    - name: Prepare upload folder AST-Gui Windows
      if: matrix.os == 'windows-2025'
      shell: bash
      run: |
        mkdir -p upload_dir
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "Tag detected: copying files without .pdb"
          find Gui/bin/Release/net8.0-windows/${{ matrix.rid }}/publish/ -maxdepth 1 -type f ! -iname '*.pdb' -exec cp {} upload_dir/ \;
        else
          echo "Branch build: copying all files"
          cp Gui/bin/Release/net8.0-windows/${{ matrix.rid }}/publish/* upload_dir/
        fi

    - name: Copy command files (if any)
      shell: bash
      run: |
        set -euo pipefail
        src="Install/${{ matrix.rid }}"
        if [ -d "$src" ] && compgen -G "$src/*" > /dev/null; then
          cp -r "$src/"* upload_dir/
          echo "Copied command files from $src"
        else
          echo "No command files for $src — skipping."
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ast-${{ matrix.rid }}${{ github.ref_type == 'tag' && format('-{0}', github.ref_name) || '' }}
        path: upload_dir/

    - name: Create archive folder
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        mkdir -p release_assets

    - name: Create ZIP archive (Windows)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-2025'
      shell: pwsh
      run: |
        $filename = "ast-${{ matrix.rid }}-${{ github.ref_name }}"
        Compress-Archive -Path upload_dir\* -DestinationPath release_assets\$filename.zip

    - name: Create TAR.GZ archive (Linux)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os != 'windows-2025'
      shell: bash
      run: |
        filename="ast-${{ matrix.rid }}-${{ github.ref_name }}"
        tar -czvf "release_assets/${filename}.tar.gz" -C upload_dir .

    - name: Create GitHub Draft Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        draft: true
        files: release_assets/*
